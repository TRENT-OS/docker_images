<?xml version="1.0" encoding="UTF-8" standalone="no" ?>

<!--
  Template for creating a new dashboard configuration.
-->
<Configuration Key="dashboard2">

  <!-- Set this value to true if you absolutely require to run the dashboard service as
       super user (LOCAL SYSTEM on Windows, UID 0 on UNIX).  THIS IS NOT ENCOURAGED AT ALL!
       User home for that user on Windows is C:\Windows\System32\config\systemprofile\.bauhaus
  -->
  <!-- <Binding Key="AllowRunningAsSuperUser" Value="false" /> -->

  <!-- These are all optional. -->
  <Node Key="EmbeddedTomcat">
    <!-- The address Tomcat will listen on. If empty, will listen on all possible addresses. -->
    <!-- For a personal or temporary dashboard you may want to specify -->
    <!-- 127.0.0.1 (127.x.y.z), ::1, or localhost. -->
    <!-- <Binding Key="BindAddress" Value="" /> -->

    <!-- The Tomcat WebServer TCP ports, both default to 9090 if unspecified.
         Which one will be used depends on whether https is configured below. -->
    <Binding Key="HttpPort" Value="9090" />
    <Binding Key="HttpsPort" Value="9443" />

    <!-- Settings to make Tomcat use https instead of http. -->
    <!-- See the Dashboard related installation section of our manual for further details. -->
    <!-- If the option "KeyAlias" is specified, the Dashboard will use https instead of http. -->
    <!-- KeyAlias == auto means: use a generated self-signed certificate. Otherwise
         it is expected to name the key in the keystore file you will need to create manually
         and configure below. -->
    <!-- <Binding Key="KeyAlias" Value="auto" /> -->
    <!-- <Binding Key="KeyStorePath" Value="" /> -->
    <Binding Key="KeyStorePassword" Value="changeit" />
    <!-- Server names for automatically generated self-signed certificate -->
    <!-- <Node Key="SubjectAltNames"> -->
    <!--     <Binding Key="1" Value="axivion-dashboard" /> -->
    <!--     <Binding Key="2" Value="axivion-dashboard.example.com" /> -->
    <!-- </Node> -->

    <!-- Path-prefix for the Dashboard Url. May be empty. If you proxy the dashboard, the paths in tomcat and on the proxy must match. -->
    <!-- <Binding Key="DashboardUrlBase" Value="/axivion" /> -->

    <!-- Directory of the java installation used for running Tomcat -->
    <!-- <Binding Key="JreHome" Value="$(JRE_HOME)" /> -->

    <!-- The maximum heap size in Megabytes, the tomcat process may use -->
    <!-- <Binding Key="JavaMaxHeapSize" Value="1024" /> -->

    <!-- Java preferences for the used IP version.
         Empty: enable IPv4 and IPv6, prefer IPv4 (Java default)
         "ForceIPv4": only enable IPv4, disable IPv6. (-Djava.net.preferIPv4Stack=true)
         "PreferIPv6": enable IPv4 and IPv6, Prefer IPv6. (-Djava.net.preferIPv6Addresses=true)
    -->
    <Binding Key="IPPreference" Value="" />

    <!-- Directory where tomcat process writes its temporary files.
         It might be necessary to configure this directory to a system-local location
         when the dashboard configuration lies on network-based storage like
         NFS, SMB, CIFS.
    -->
    <!-- <Binding Key="RuntimeDirectory" Value="../tomcat" /> -->

    <!-- By default no values are configured here. The given binding is just an example overriding the value
         Tomcat sends for the "Server"-Response Header in its HTTP responses.
         Note, that any configuration may break the functionality of Tomcat as provided by Axivion.
         So unless you have a very good reason to do so, we recommend you leave these settings alone.
         See here for possible configuration options: https://tomcat.apache.org/tomcat-7.0-doc/config/http.html
    -->
    <!-- <Node Key="Connector"> -->
    <!--     <Binding Key="server" Value="Our own company dashboard!" /> -->
    <!-- </Node> -->
  </Node>

  <!-- This URL is used where the Dashboard creates links to itself
       (e.g. startup hint, links in erosion notification e-mails).
       The option is optional and can be set if the automatic URL guessing
       does not work. It can be overwritten by an administrative option
       in the Web UI (does not affect printed URL on Dashboard startup). -->
  <!-- <Binding Key="Url" Value="https://localhost:8043/axivion" /> -->

  <!-- In simple cases, these are preferrable to a wrapper script for preparing/cleaning up some system environment
       e.g. network drive mounts, before starting and after stopping the Dashboard.
       If you already start the Dashboard using your own wrapper script, you won't need these,
       but when running the Dashboard as a System service, these can come in handy.
       Both commands are executed in a command shell environment with the Dashboard config directory
       as working directory. -->
  <!-- <Binding Key="PreStartCommand" Value="" /> -->
  <!-- <Binding Key="PostStopCommand" Value="" /> -->

  <!-- The Dashboard writes different kinds of log files: -->
  <!-- -->
  <!-- + tomcat.log: which contains information relevant to tomcat startup/shutdown and is overwritten on every restart. -->
  <!-- + axivion_dashboard.log: The main dashboard log file. Rotated and kept in up to 6 files of 10 MB. -->
  <!-- + axivion_sourceserver.log: Contains stuff related with source-code fetching. Rotated and kept in up to 6 files of 10 MB. -->
  <!-- + axivion_dashboard_3rdparty.log: Contains stuff logged by 3rd party libraries the dashboard uses. Rotated and kept in up to 6 files of 10 MB. -->
  <!-- + localhost_access_log.YYYY-MM-DD.txt: The Tomcat Access log. Rotated daily. -->
  <!-- + commons-daemon.YYYY-MM-DD.log: Windows service runner log. -->
  <!-- + axivion_dashboard_service-stdout.YYYY-MM-DD.log: Windows service console log. -->
  <!-- + axivion_dashboard_service-stderr.YYYY-MM-DD.log: Windows service error console log. -->
  <!-- -->
  <!-- These are all optional. The configured values are the defaults. -->
  <Node Key="Logging">
    <!-- Directory where the log files will be placed. -->
    <!-- <Binding Key="Directory" Value="../logs" /> -->

    <!-- The log-level only influences the log-files prefixed by axivion -->
    <!-- "debug", "info", "warning", "error", "fatal" -->
    <!-- <Binding Key="Level" Value="info" /> -->

    <!-- Whether to write the Tomcat Server access log. -->
    <!-- <Binding Key="WriteAccessLog" Value="true" /> -->

    <!-- Number of days to keep the access log. Cleaned once at startup. Specify 0 to keep forever. -->
    <!-- <Binding Key="DaysToKeepAccessLog" Value="30" /> -->
  </Node>

  <!-- If you do not intend to integrate the dashboard with some existing user database you probably don't have to change anything here. -->
  <!-- External Authenticators can check user's passwords and read their e-mail adresses, fullnames and group memberships. -->
  <Node Key="AuthenticationMethods">

    <!-- Authenticator query order.
         - No need to enable any, as the last resort is always the internal user database
         - The user database template contains a user 'admin' with password 'password'
    -->
    <Node Key="Enabled">
      <!-- <Binding Key="1" Value="ActiveDirectory_Example"/> -->
      <!-- <Binding Key="2" Value="Ldap_Example"/> -->
    </Node>

    <!--
        In order to test the setup of your authenticator go to the Settings->General Page in your Dashboard.
        The Authenticator test buttons there should give you some feedback and
        allow you to trust your LDAP server's certificate if it is not already trusted by your Java Virtual Machine.
        You also might need some feedback which is provided in axivion_dashboard.log.
        Also consider changing the LogLevel above to get more information in the logs.
    -->
    <Node Key="Available">

      <!--
          This Authenticator is similar to the "Ldap" authenticator but makes use of the well-defined layout
          of ActiveDirectory to pre-configure more values and also to leverage certain functionality
          that is available on a computer joined into a windows domain in order to query the Active Directory Server.
          This requires that the user account running the dashboard is a domain account inside
          the windows domain containing the dashboard users. Works on Windows only.
          In many cases you won't need to configure anything if you are using this authenticator
          and you only need to assign permissions to your AD-groups inside the dashboard.
      -->
      <Node Key="ActiveDirectory_Example">
        <Binding Key="Type" Value="ActiveDirectory"/>
        <!-- With the exception of UserSearchBase and GroupSearchBase the example values are also the default. -->
        <Node Key="Properties">
          <!-- The name of the Active Directory Server to use.
               Usually can be left emtpy as it can be autodetected. -->
          <!-- <Binding Key="ServerName" Value=""/> -->

          <!-- Whether or not all Active Directory LDAP connections shall be SSL secured. -->
          <!-- <Binding Key="UseSsl" Value="true"/> -->

          <!-- You should set this to true if you do not want to have UseSsl=true.
               This will instruct the connector to use secure authentication. If UseSsl=true,
               this option has no effect. -->
          <!-- <Binding Key="SecureAuthentication" Value="false"/> -->

          <!-- A subtree in your Active Directory that is used to look up users in.
               If you do not specify anything the defaultNamingContext returned from your
               Active Directory Server will be used. -->
          <!-- <Binding Key="UserSearchBase" Value="CN=Users,DC=Example,DC=Com"/> -->

          <!-- The search filter used to find users in your Active Directory.
               The placeholder {0} will be replaced with the *-pattern or username to
               search for. -->
          <!-- <Binding Key="UserSearchFilter"
                        Value="(&amp;(sAMAccountName={0})(objectClass=user)(!(objectClass=computer)))"/> -->

          <!-- The attribute of the user objects that will be used as login name. -->
          <!-- <Binding Key="UserIdAttribute" Value="sAMAccountName"/> -->

          <!-- A subtree in your Active Directory that is used to look up groups in.
               If you do not specify anything the defaultNamingContext returned from your
               Active Directory Server will be used. -->
          <!-- <Binding Key="GroupSearchBase" Value="CN=Users,DC=Example,DC=Com"/> -->

          <!-- The search filter used to find groups in your Active Directory.
               The placeholder {0} will be replaced with the *-pattern or groupname to
               search for. -->
          <!-- <Binding Key="GroupSearchFilter"
                        Value="(&amp;(sAMAccountName={0})(objectClass=group)(!(objectClass=computer)))"/> -->

          <!-- The attribute of the group objects that will be used as group name. -->
          <!-- <Binding Key="GroupIdAttribute" Value="sAMAccountName"/> -->

          <!-- The strategy used to look up group memberships of the users. There are 3
              strategies available: MemberOfAttribute, GroupFilter and UserGroup. All
              of them can also detect recursive group memberships. If you want to explictly
              disable Group resolution you can also configure the value None here. In this case
              all users will automatically get assigned a membership in a group named like this
              authenticator configuration.

              MemberOfAttribute and GroupFilter both start from the user object and look up
              direct group memberships either via the user's MemberOf attribute or via the GroupFilter.
              The strategy is then recursed until no more new groups are found.

              Strategy UserGroup avoids LDAP searches and requires the configuration value UserGroup
              to be configured.
              All of the users mentioned in UserGroup (given they are found) will be reported as
              members of the dashboard group named UserGroup and members of the LDAP groups
              will also be reported to the dashboard as members of the group named UserGroup.
              The algorithm first looks up the group objects in UserGroup and then recursively
              determines their users via the Member attribute.
             -->
          <!-- <Binding Key="MembershipResolutionStrategy" Value="MemberOfAttribute"/> -->

          <!-- Here you can choose a different group name to be reported to the dashboard in case of
               MembershipResolutionStrategy UserGroup or None -->
          <!-- <Binding Key="UserGroupName" Value="AD-Users"/> -->

          <!-- In case you choose the MembershipResolutionStrategy GroupFilter above you can
               customize the GroupFilter being used to detect the direct groups of a user here.
               The placeholder {0} will be replaced with the user's DN for the LDAP search. -->
          <!-- <Binding Key="GroupFilter"
                        Value="(&amp;(objectClass=group)(member={0})(!(objectClass=computer)))"/> -->

          <!-- In case you choose the MembershipResolutionStrategy UserGroup above you must
               also configure your UserGroup. All users found by traversing the entries in the list
               will be reported as members of a group named like this authenticator configuration. -->
          <!-- <Binding Key="UserGroup" Value="CN=Developers,CN=Users,DC=Example,DC=Com;CN=wjane,CN=Users,DC=Example,DC=Com;boris"/> -->

          <!-- Whether or not LDAP searches should follow referrals. -->
          <Binding Key="FollowReferrals" Value="False"/>
        </Node>
      </Node>

      <!--
          This Authenticator directly connects with an LDAP server using the LDAP protocol.
      -->
      <Node Key="Ldap_Example">
        <Binding Key="Type" Value="Ldap"/>
        <Node Key="Properties">

          <!-- In case of ActiveDirectory see http://serverfault.com/questions/78089/find-name-of-active-directory-domain-controller
               if you don't know the name of your LDAP server.
               If your server supports it, you may secure your connection using ldaps:// instead of ldap://
               This usually requires changing the port (default 636)
               In case of a self-signed certficate you may first need to trust the server certificate
               from the global settings page inside the Dashboard.
          -->
          <Binding Key="Url" Value="ldap://ad-server:389"/>

          <!-- STARTTLS is the recommended way to secure the dashboard's connections to the LDAP server.
               In case of a self-signed certficate you may first need to trust the server certificate
               from the global settings page inside the Dashboard.
          -->
          <Binding Key="StartTls" Value="true"/>

          <!-- The BindUser necessary for user attribute fetching. You may want to create
               a dedicated user for this task without write permission and limited read permission
               or use an existing user with empty password if unauthenticated binds are allowed
               with sufficient rights.
          -->
          <Binding Key="BindUser" Value="CN=Administrator,CN=Users,DC=example,DC=com"/>
          <Binding Key="BindPassword" Value=""/>

          <!-- Whether or not LDAP searches should follow referrals. -->
          <Binding Key="FollowReferrals" Value="True"/>

          <!-- If you set this to a value > 0 LDAP searches will be performed using the paging extension.
               Setting this to 0 or a negative value will deactivate paging but may cause errors when
               there are a lot of results and the server limits the maximum number of results which most
               servers do. If you set the value too low, this might affect performance.
          -->
          <!-- <Binding Key="PageSize" Value="500"/> -->

          <!-- A subtree in your LDAP Directory that is used to look up users in. -->
          <Binding Key="UserSearchBase" Value="CN=Users,DC=Example,DC=Com"/>

          <!-- The search filter used to find users in your LDAP Directory.
               The placeholder {0} will be replaced with the *-pattern or username to
               search for. -->
          <Binding Key="UserSearchFilter"
                   Value="(&amp;(sAMAccountName={0})(objectClass=user)(!(objectClass=computer)))"/>

          <!-- The attribute of the user objects that will be used as login name. -->
          <Binding Key="UserIdAttribute" Value="sAMAccountName"/>

          <!-- You may want to define attributes different from the defaults for the mail adresses
               or display names or disable the resolution of these attributes completely. -->
          <!-- <Binding Key="FetchUserMail" Value="true"/> -->
          <!-- <Binding Key="UserMailAttribute" Value="mail"/> -->
          <!-- <Binding Key="FetchUserFullName" Value="true"/> -->
          <!-- <Binding Key="UserFullNameAttribute" Value="displayName"/> -->

          <!-- A subtree in your LDAP Directory that is used to look up groups in. -->
          <Binding Key="GroupSearchBase" Value="CN=Users,DC=Example,DC=Com"/>

          <!-- The search filter used to find groups in your LDAP Directory.
               The placeholder {0} will be replaced with the *-pattern or groupname to
               search for. -->
          <Binding Key="GroupSearchFilter"
                   Value="(&amp;(sAMAccountName={0})(objectClass=group)(!(objectClass=computer)))"/>

          <!-- The attribute of the group objects that will be used as group name. -->
          <Binding Key="GroupIdAttribute" Value="sAMAccountName"/>

          <!-- The strategy used to look up group memberships of the users. There are 4
              strategies available: MemberOfAttribute, GroupFilter UidGroupFilter and UserGroup.
              All of them can also detect recursive group memberships. If you want to explictly
              disable Group resolution you can also configure the value None here. In this case
              all users will automatically get assigned a membership in a group named like this
              authenticator configuration.

              MemberOfAttribute, GroupFilter and UidGroupFilter start from the user object and look up
              direct group memberships either via the user's MemberOf attribute or by doing an LDAP search
              for groups with a given member string which is either a DN in case of GroupFilter or
              a User- or GroupId in case of UidGroupFilter.
              The strategy is then recursed until no more new groups are found.

              Strategy UserGroup avoids LDAP searches and requires the configuration value UserGroup
              to be configured.
              All of the users mentioned in UserGroup (given they are found) will be reported as
              members of the dashboard group named UserGroup and members of the LDAP groups
              will also be reported to the dashboard as members of the group named UserGroup.
              The algorithm first looks up the group objects in UserGroup and then recursively
              determines their users via the Member attribute.
             -->
          <!-- <Binding Key="MembershipResolutionStrategy" Value="GroupFilter"/> -->

          <!-- Here you can choose a different group name to be reported to the dashboard in case of
               MembershipResolutionStrategy UserGroup or None -->
          <!-- <Binding Key="UserGroupName" Value="AD-Users"/> -->

          <!-- In case you choose the MembershipResolutionStrategy GroupFilter above you must also
               provide a GroupFilter that is needed to detect the direct groups of a user.
               The placeholder {0} will be replaced with the user's DN for the LDAP search. -->
          <Binding Key="GroupFilter"
                   Value="(&amp;(objectClass=group)(member={0})(!(objectClass=computer)))"/>

          <!-- In case you choose the MembershipResolutionStrategy UidGroupFilter above you must also
               provide UidGroupFilter that is needed to detect the direct groups of a user.
               The placeholder {0} will be replaced with the MemberUser- or MemberGroupID for the LDAP
               search. -->
          <!-- <Binding Key="UidGroupFilter"
                        Value="(&amp;(objectClass=group)(memberUid={0})(!(objectClass=computer)))"/> -->

          <!-- In case you choose the MembershipResolutionStrategy MemberOfAttribute above you can
               override the attribute of the user-objects which is used to get the DNs of the
               group-objects the users are a direct member of.
          -->
          <!-- <Binding Key="MemberOfAttribute" Value="memberOf"/> -->

          <!-- In case you choose the MembershipResolutionStrategy UserGroup above you must
               also configure your UserGroup. All users found by traversing the entries in the list
               will be reported as members of a group named like this authenticator configuration.
               The LDAP attribute member is being used in order to get a list of DNs of a group's members.
               You can use a different attribute by configuring MemberAttribute.
               In order to determine whether a group member is itself a user or a group,
               the list-attribute objectClass is being used with a list of classes an LDAP
               object conforms to. The defaults are usually fine, but you might want to finetune the
               requirements using the options ObjectClassAttribute, UserObjectClass and GroupObjectClass.
              -->
          <!-- <Binding Key="UserGroup" Value="CN=Developers,CN=Users,dashboard-admins;DC=Example,DC=Com;CN=wjane,CN=Users,DC=Example,DC=Com;boris"/> -->
          <!-- <Binding Key="MemberAttribute" Value="member"/> -->
          <!-- <Binding Key="ObjectClassAttribute" Value="objectClass"/> -->
          <!-- <Binding Key="UserObjectClass" Value="user"/> -->
          <!-- <Binding Key="GroupObjectClass" Value="group"/> -->

          <!-- MemberAttribute requires a multi-value attribute on the group objects containing the full
               member DNs as values.
               Some LDAP configurations do not provide such an attribute on their group objects and instead
               have a multi-value attribute containing the user-ids. If you configure a value here this
               will be used instead of MemberAttribute and you will also need to configure UserSearchBase,
               UserSearchFilter, GroupSearchBase and GroupSearchFilter. -->
          <!-- <Binding Key="MemberUidAttribute" Value="memberUid"/> -->

        </Node>
      </Node>

    </Node>

    <!-- This can be used in order to integrate with the authentication mechanisms of a proxying webserver.
         When using this option you must ensure that untrusted users can only access the dashboard via this
         tunnel and that the proxy always sets the configured HTTP header.
         The option overrides the above chain mechanism, however users can explicitly fall back
         to it by navigating directly to the login page.
         By default this feature is disabled.
    -->
    <!-- Binding Key="TrustedUserHttpHeader" Value="REMOTE_USER" /-->

    <!-- If configured, all dashboard accesses, that do not explicitly provide credentials will be treated as
         if the configured user had properly authenticated. This is useful if you want to provide anonymous
         access with configurable permissions, or if you simply do not want the complexity of user-management.
         If the configured user is not found behaviour is the same as if this option was not given.
    -->
    <!-- Binding Key="DefaultUser" Value="some_dashboard_user" /-->
  </Node>

  <!-- A shell command to execute prior to starting the Dashboard.
       This can be useful e.g. in order to establish some folder mappings via the
       windows command "subst" -->
  <!-- <Binding Key="PreStartCommand" Value=""/> -->

  <!-- Same as PreStartCommand but executed after stopping the Dashboard. -->
  <!-- <Binding Key="PostStopCommand" Value=""/> -->

  <!-- The Charts that will be seen on the ProjectTrend page. -->
  <!-- This configuration is shared between all projects. -->
  <!-- Refer to the Continuous integration documentation to see which metrics are available. -->
  <Node Key="ChartDefinitions">
    <Node Key="Architecture Violations">
      <Binding Key="1" Value="Metric.Violations.Architecture"/>
      <Binding Key="2" Value="Metric.Violations.Architecture.disabled"/>
    </Node>
    <Node Key="Clones">
      <Binding Key="1" Value="Metric.Violations.Clone"/>
      <Binding Key="2" Value="Metric.Violations.Clone.disabled"/>
    </Node>
    <Node Key="Cyclic Dependencies">
      <Binding Key="1" Value="Metric.Violations.Cycle"/>
      <Binding Key="2" Value="Metric.Violations.Cycle.disabled"/>
    </Node>
    <Node Key="Dead Entities">
      <Binding Key="1" Value="Metric.Violations.Dead_Entity"/>
      <Binding Key="2" Value="Metric.Violations.Dead_Entity.disabled"/>
    </Node>
    <Node Key="Metric Violations">
      <Binding Key="1" Value="Metric.Violations.Metric"/>
      <Binding Key="2" Value="Metric.Violations.Metric.disabled"/>
    </Node>
    <Node Key="Style Violations">
      <Binding Key="1" Value="Metric.Violations.Style"/>
      <Binding Key="2" Value="Metric.Violations.Style.disabled"/>
    </Node>
    <Node Key="Overall Lines of Code">
      <Binding Key="1" Value="Metric.Lines.Comment.sum"/>
      <Binding Key="2" Value="Metric.Lines.LOC.sum"/>
    </Node>
    <Node Key="Overall Complexity">
      <Binding Key="1" Value="Metric.Number_Of_Statements.sum"/>
      <Binding Key="2" Value="Metric.McCabe_Complexity.sum"/>
    </Node>
  </Node>

</Configuration>
